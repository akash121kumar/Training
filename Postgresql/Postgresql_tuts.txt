********************************************************	postgreSQL 	***************************************************************

1.How to install a Postgresql :
	$sudo apt-get install postgresql

2.To open Postgres in terminal:
	$sudo su postgres  			o/p ==> postgres@berylsystems:/home/beryl-systems$
	=>psql					o/p ==>psql (10.10 (Ubuntu 10.10-0ubuntu0.18.04.1)) Type "help" for help. postgres=#


3.To check the list of database :
	postgres=# \l				o/p ==> Gives the list of a database.
					 List of databases
   Name    |  Owner   | Encoding | Collate | Ctype |   Access privileges   
-----------+----------+----------+---------+-------+-----------------------
 mydb      | postgres | UTF8     | en_IN   | en_IN | 
 postgres  | postgres | UTF8     | en_IN   | en_IN | 
 template0 | postgres | UTF8     | en_IN   | en_IN | =c/postgres          +
           |          |          |         |       | postgres=CTc/postgres
 template1 | postgres | UTF8     | en_IN   | en_IN | =c/postgres          +
           |          |          |         |       | postgres=CTc/postgres
(4 rows)

4.To create a database : 
	postgres=# create database training_db;			o/p ==> CREATE DATABASE 

5.To select a database :
	postgres=# \c training_db;				o/p ==>You are now connected to database "training_db" as user "postgres".

6.To Drop a Database :		
	postgres=# Drop Database mydb;				o/p ==> DROP DATABASE

7.To create a Table :
	CREATE TABLE COMPANY(					
   		ID INT PRIMARY KEY     NOT NULL,
   		NAME           TEXT    NOT NULL,
   		AGE            INT     NOT NULL,
   		ADDRESS        CHAR(50),
   		SALARY         REAL
			);
	
	CREATE TABLE DEPARTMENT(
   		ID INT PRIMARY KEY      NOT NULL,
   		DEPT           CHAR(50) NOT NULL,
   		EMP_ID         INT      NOT NULL
			);

		o/p ==> CREATE TABLE

8.To check the table in database :
	training_db=# \d

	o/p==>   	
		List of relations
	 Schema |    Name    | Type  |  Owner   
	--------+------------+-------+----------
	 public | company    | table | postgres
	 public | department | table | postgres
	(2 rows)

9.To describe each table :
	training_db=# \d company

	o/p==>
			Table "public.company"
	 Column  |     Type      | Collation | Nullable | Default 
	---------+---------------+-----------+----------+---------
	 id      | integer       |           | not null | 
	 name    | text          |           | not null | 
	 age     | integer       |           | not null | 
	 address | character(50) |           |          | 
	 salary  | real          |           |          | 
	Indexes:
	    "company_pkey" PRIMARY KEY, btree (id)

10.To drop a table :
	training_db=# Drop Table company;		o/p==>Drop table
		
			List of relations
	 Schema |    Name    | Type  |  Owner   
	--------+------------+-------+----------
	 public | department | table | postgres
	(1 row)

	training_db=# drop table department; 		o/p==>DROP TABLE		Did not find any relations

11.To create a schema:(Collection of tables)
	training_db=# create schema myschema;		o/p==> CREATE SCHEMA

	1. To create a table in schema:
		training_db=# create table myschema.company(
		ID INT NOT NULL,
		Name VARCHAR(20) NOT NULL,
		Age INT NOT NULL,
		Address VARCHAR(30),
		Salary DECIMAL(18,2),
		PRIMARY KEY(ID));
			O/p==> CREATE TABLE
	2.To verify the table in schema :
		training_db=# select * from myschema.company;
		o/p==>  
					id | name | age | address | salary 
				       ----+------+-----+---------+--------
	3.Syntax to Drop a schema:
		training_db=# drop schema myschema cascade; 	o/p==> NOTICE:  drop cascades to table myschema.company  DROP SCHEMA

12.To insert a value in a table :
	training_db=# Insert into company values(6,'Rahul',20,'INDIA',19800.20,'2019-08-27');
		o/p==>INSERT 0 1


13.SELECT QUERY :
	1.To select all the column from a table :
		training_db=# select * from company 
			o/p==>
					id | name  | age |  address   | salary  | join_date  
					----+-------+-----+------------+---------+------------
					  1 | Paul  |  32 | California |   20000 | 2001-07-13
					  2 | Allen |  25 | Texas      |         | 2007-12-13
					  3 | Teddy |  23 | Norway     |   20000 | 
					  4 | Mark  |  25 | Rich-Mond  |   65000 | 2007-12-13
					  5 | David |  27 | Texas      |   85000 | 2007-12-13
					  6 | Rahul |  20 | INDIA      | 19800.2 | 2019-08-27
					(6 rows)
	2.To select a specific column from a table :
		training_db-# select name from company;
			o/p==>
					 name  
					-------
					 Paul
					 Allen
					 Teddy
					 Mark
					 David
					 Rahul
					(6 rows)
	3.To select multiple column from a table :
		training_db=# select  name,age from company;
			o/p==>   
					name  | age 
				       -------+-----
				        Paul  |  32
				        Allen |  25
				        Teddy |  23
				        Mark  |  25
				        David |  27
				        Rahul |  20
					(6 rows)

14.SQL Expressions : 
		An expression is a combination of one or more values, operators, and PostgresSQL functions that evaluate to a value.
	1.Boolean Expressions : Boolean Expressions fetch the data on the basis of matching single value.
			Example :training_db=# select * from company WHERE salary > 50000;
					o/p==> 
						id | name  | age |  address   | salary | join_date  
					       ----+-------+-----+------------+--------+------------
					  	 4 | Mark  |  25 | Rich-Mond  |  65000 | 2007-12-13
					  	 5 | David |  27 | Texas      |  85000 | 2007-12-13
						(2 rows)
	2.Numeric Expressions :
				used to perform any mathematical operation in any query. 				
 			Example :training_db=# select (21*7) as multiplication;
					o/p==>  multiplication 
						----------------
            						     147
						(1 row)
	3.Date Expressions :
				return the current system date and time values
			Example : training_db=# select current_date;
					o/p==> current_date 
					      --------------
 						 2019-09-03
					      (1 row)

15.WHERE CLAUSE :
		WHERE clause is used to specify a condition while fetching the data from single table or joining with multiple tables.
		syntax : select * from tablename where condition;
		Example :  
			Query1 : training_db=# select * from company where age>=25 AND salary>=65000;
				o/p==>
						 id | name  | age |  address   | salary | join_date  
						----+-------+-----+------------+--------+------------
						  4 | Mark  |  25 | Rich-Mond  |  65000 | 2007-12-13
						  5 | David |  27 | Texas      |  85000 | 2007-12-13
						(2 rows)
			Query2 : training_db=# select * from company where age>=25 or salary>=65000;
				o/p==>
						 id | name  | age |  address   | salary | join_date  
						----+-------+-----+------------+--------+------------
						  1 | Paul  |  32 | California |  20000 | 2001-07-13
						  2 | Allen |  25 | Texas      |        | 2007-12-13
						  4 | Mark  |  25 | Rich-Mond  |  65000 | 2007-12-13
						  5 | David |  27 | Texas      |  85000 | 2007-12-13
						(4 rows)
			Query3 : training_db=# select name from company where age is not null;

				o/p==>
						 name  
						-------
						 Paul
						 Allen
						 Teddy
						 Mark
						 David
						 Rahul
						(6 rows)
			Query4 : training_db=# select * from company where age in (25,27);
				o/p==> 	
						 id | name  | age |  address   | salary | join_date  
						----+-------+-----+------------+--------+------------
						  2 | Allen |  25 | Texas      |        | 2007-12-13
						  4 | Mark  |  25 | Rich-Mond  |  65000 | 2007-12-13
						  5 | David |  27 | Texas      |  85000 | 2007-12-13
						(3 rows)
			Query5 :training_db=# select name,age from company where exists(select age from company where salary>65000);
				o/p==>
						 name  | age 
						-------+-----
						 Paul  |  32
						 Allen |  25
						 Teddy |  23
						 Mark  |  25
						 David |  27
						 Rahul |  20
						(6 rows)
			Query6 : training_db=# select * from company where age>(select age from company where salary >65000);
				o/p==>
						 id | name | age |  address   | salary | join_date  
						----+------+-----+------------+--------+------------
						  1 | Paul |  32 | California |  20000 | 2001-07-13
						(1 row)

16.AND & OR clause :
			AND and OR operators are used to combine multiple conditions to narrow down selected data in a PostgreSQL statement.
		1.The AND Operator : if both the condition is true then it will be true.
			Example : training_db=# select * from company where age=25 and salary>=65000;
					o/p==>
						 id | name | age |  address   | salary | join_date  
						----+------+-----+------------+--------+------------
						  4 | Mark |  25 | Rich-Mond  |  65000 | 2007-12-13
						(1 row)
		2.The OR operators : If one of the condition is true then it is true.
			Example : training_db=# select * from company where age>25 or salary>20000;
					o/p==> 
						 id | name  | age |  address   | salary | join_date  
						----+-------+-----+------------+--------+------------
						  1 | Paul  |  32 | California |  20000 | 2001-07-13
						  4 | Mark  |  25 | Rich-Mond  |  65000 | 2007-12-13
						  5 | David |  27 | Texas      |  85000 | 2007-12-13
						(3 rows)

17.UPDATE Query : 
			used to modify the existing records in a table
			Example1 : training_db=# update company set salary=17000 where id=3
					o/p==>UPDATE 1
						 id | name  | age |  address   | salary  | join_date  
						----+-------+-----+------------+---------+------------
						  1 | Paul  |  32 | California |   20000 | 2001-07-13
						  2 | Allen |  25 | Texas      |         | 2007-12-13
						  4 | Mark  |  25 | Rich-Mond  |   65000 | 2007-12-13
						  5 | David |  27 | Texas      |   85000 | 2007-12-13
						  6 | Rahul |  20 | INDIA      | 19800.2 | 2019-08-27
						  3 | Teddy |  23 | Norway     |   17000 | 
						(6 rows)
			Example2: training_db=# update company set address='INDIA' where name='Paul';
					o/p==>
						 id | name  | age |  address   | salary  | join_date  
						----+-------+-----+------------+---------+------------
						  2 | Allen |  25 | Texas      |         | 2007-12-13
						  4 | Mark  |  25 | Rich-Mond  |   65000 | 2007-12-13
						  5 | David |  27 | Texas      |   85000 | 2007-12-13
						  6 | Rahul |  20 | INDIA      | 19800.2 | 2019-08-27
						  3 | Teddy |  23 | Norway     |   17000 | 
						  1 | Paul  |  32 | INDIA      |   20000 | 2001-07-13
						(6 rows)
18.DELETE Query : 
			used to delete an existing record.
			Example : training_db=# delete from company where salary is null;
					o/p==>
						 id | name  | age |  address   | salary  | join_date  
						----+-------+-----+------------+---------+------------
						  4 | Mark  |  25 | Rich-Mond  |   65000 | 2007-12-13
						  5 | David |  27 | Texas      |   85000 | 2007-12-13
						  6 | Rahul |  20 | INDIA      | 19800.2 | 2019-08-27
						  3 | Teddy |  23 | Norway     |   17000 | 
						  1 | Paul  |  32 | INDIA      |   20000 | 2001-07-13

19.LIKE clause:
		used to match text values against a pattern using wildcards.
		1.Any value starts with -'abc%'
		Example : training_db=# select * from company where name like 'Ra%';
				o/p==> 
						 id | name  | age | address | salary  | join_date  
						----+-------+-----+---------+---------+------------
						  6 | Rahul |  20 | INDIA   | 19800.2 | 2019-08-27
						(1 row)
		2.Any value end with -'%abc' 
		Example : training_db=# select * from company where address like '%A';
				o/p==>
						 id | name  | age | address | salary  | join_date  
						----+-------+-----+---------+---------+------------
						  6 | Rahul |  20 | INDIA   | 19800.2 | 2019-08-27
						  1 | Paul  |  32 | INDIA   |   20000 | 2001-07-13
						(2 rows)
		3.Any value which is between at any position-'%ab%'
		Example : training_db=# select * from company where address like '%or%';
				o/p==>
						 id | name  | age | address | salary | join_date 
						----+-------+-----+---------+--------+-----------
						  3 | Teddy |  23 | Norway  |  17000 | 
						(1 row)
		4.Any values that have 00 in the second and third positions-'_00'
		Example : training_db=# select * from company where name like '__h%';
				o/p==> 	
						 id | name  | age | address | salary  | join_date  
						----+-------+-----+---------+---------+------------
						  6 | Rahul |  20 | INDIA   | 19800.2 | 2019-08-27
						(1 row)

20.LIMIT clause :
			used to limit the data amount returned by the SELECT statement.
			Example :  training_db=# select * from company limit 2;
					o/p==>

						 id | name  | age |  address   | salary | join_date  
						----+-------+-----+------------+--------+------------
						  4 | Mark  |  25 | Rich-Mond  |  65000 | 2007-12-13
						  5 | David |  27 | Texas      |  85000 | 2007-12-13


21.ORDER BY clause : 
			ORDER BY clause is used to sort the data in ascending or descending order, based on one or more columns.
			Example: training_db=# select * from company order by age;
					o/p==>
						 id | name  | age |  address   | salary  | join_date  
						----+-------+-----+------------+---------+------------
						  6 | Rahul |  20 | INDIA      | 19800.2 | 2019-08-27
						  3 | Teddy |  23 | Norway     |   17000 | 
						  4 | Mark  |  25 | Rich-Mond  |   65000 | 2007-12-13
						  5 | David |  27 | Texas      |   85000 | 2007-12-13
						  1 | Paul  |  32 | INDIA      |   20000 | 2001-07-13
						(5 rows)

22.GROUP BY clause: 
		used in with the SELECT statement to group together those rows in a table that have identical data.It is generally used with 			aggregate functions.
		Example1:training_db=# select address,sum(salary) from company group by address;
				o/p==> 
						  address   |   sum   
						------------+---------
						 Rich-Mond  |   65000
						 Norway     |   17000
						 INDIA      | 39800.2
						 Texas      |   85000
						(4 rows)
		Example2:training_db=# select name,sum(salary) from company group by name order by name;
				o/p==>
						 name  |   sum   
						-------+---------
						 David |   85000
						 Mark  |   65000
						 Paul  |   20000
						 Rahul | 19800.2
						 Teddy |  102000
						(5 rows)

23.WITH clause : 
		the WITH query provides a way to write auxiliary statements for use in a larger query. It helps in breaking down complicated 			and large queries into simpler forms, which are easily readable. 
		Example : training_db=# with summary as (select id,name from company) select * from summary;
				o/p==>
						 id | name  
						----+-------
						  4 | Mark
						  5 | David
						  6 | Rahul
						  3 | Teddy
						  1 | Paul
						  2 | Teddy
						(6 rows)


24.HAVING clause :
 			The WHERE clause places conditions on the selected columns, whereas the HAVING clause places conditions on groups 				created by the GROUP BY clause.
			Example: training_db=# select name from company group by name having count(address)>1;
					o/p==>
						 name  
						-------
						 Teddy
						(1 row)


25.DISTINCT keyword :
			used  with SELECT statement to eliminate all the duplicate records and fetching only unique records.
			Example: training_db=# select Distinct name  from company;
					o/p==>
						 name  
						-------
						 Rahul
						 Teddy
						 David
						 Paul
						 Mark
						(5 rows)

26.JOINS :
		1.Cross join : It will give the cartesian product of the tables.
			Examples: training_db=# select * from employee cross join department;
				o/p==>
						 id | name  | age |  address   | salary  | join_date  | id |  dept   | emp_id 
						----+-------+-----+------------+---------+------------+----+---------+--------
						  4 | Mark  |  25 | Rich-Mond  |   65000 | 2007-12-13 |  1 | IT      |      2
						  5 | David |  27 | Texas      |   85000 | 2007-12-13 |  1 | IT      |      2
						  6 | Rahul |  20 | INDIA      | 19800.2 | 2019-08-27 |  1 | IT      |      2
						  3 | Teddy |  23 | Norway     |   17000 |            |  1 | IT      |      2
						  1 | Paul  |  32 | INDIA      |   20000 | 2001-07-13 |  1 | IT      |      2
						  2 | Teddy |  37 | Delhi      |   85000 |            |  1 | IT      |      2
						  4 | Mark  |  25 | Rich-Mond  |   65000 | 2007-12-13 |  2 | Billing |      1
						  5 | David |  27 | Texas      |   85000 | 2007-12-13 |  2 | Billing |      1
						  6 | Rahul |  20 | INDIA      | 19800.2 | 2019-08-27 |  2 | Billing |      1
						  3 | Teddy |  23 | Norway     |   17000 |            |  2 | Billing |      1
						  1 | Paul  |  32 | INDIA      |   20000 | 2001-07-13 |  2 | Billing |      1
						  2 | Teddy |  37 | Delhi      |   85000 |            |  2 | Billing |      1
						  4 | Mark  |  25 | Rich-Mond  |   65000 | 2007-12-13 |  3 | Sales   |      5
						  5 | David |  27 | Texas      |   85000 | 2007-12-13 |  3 | Sales   |      5
						  6 | Rahul |  20 | INDIA      | 19800.2 | 2019-08-27 |  3 | Sales   |      5
						  3 | Teddy |  23 | Norway     |   17000 |            |  3 | Sales   |      5
						  1 | Paul  |  32 | INDIA      |   20000 | 2001-07-13 |  3 | Sales   |      5
						  2 | Teddy |  37 | Delhi      |   85000 |            |  3 | Sales   |      5
						(18 rows)

		2.INNER JOIN : returns only the matching pair.
			Example1: training_db=# select emp_id,name,dept from employee inner join department on employee.id=department.emp_id;
				o/p==>
						 emp_id | name  |  dept   
						--------+-------+---------
						      2 | Teddy | IT
						      1 | Paul  | Billing
						      5 | David | Sales
						(3 rows)

			Query2:training_db=# select *  from employee inner join department on employee.id=department.emp_id;
				o/p==>
						 id | name  | age | address | salary | join_date  | id |  dept   | emp_id 
						----+-------+-----+---------+--------+------------+----+---------+--------
						  2 | Teddy |  37 | Delhi   |  85000 |            |  1 | IT      |      2
						  1 | Paul  |  32 | INDIA   |  20000 | 2001-07-13 |  2 | Billing |      1
						  5 | David |  27 | Texas   |  85000 | 2007-12-13 |  3 | Sales   |      5
						(3 rows)



		3.Left Outer join : Gives all the data from left table and only the matching data from right table.
			Query1: training_db=# select employee.id,name,dept from employee left outer join department on 					employee.id=department.emp_id order by id;
				o/p==> 
						 id | name  |  dept   
						----+-------+---------
						  1 | Paul  | Billing
						  2 | Teddy | IT
						  3 | Teddy | 
						  4 | Mark  | 
						  5 | David | Sales
						  6 | Rahul | 
						(6 rows)

		4.Right Outer Join : Gives all the data from right table and matched data from left table.
			Query1 : training_db=# select * from employee right outer join department on employee.id=department.emp_id;
				o/p==>
						 id | name  | age | address | salary | join_date  | id |  dept   | emp_id 
						----+-------+-----+---------+--------+------------+----+---------+--------
						  2 | Teddy |  37 | Delhi   |  85000 |            |  1 | IT      |      2
						  1 | Paul  |  32 | INDIA   |  20000 | 2001-07-13 |  2 | Billing |      1
						  5 | David |  27 | Texas   |  85000 | 2007-12-13 |  3 | Sales   |      5
						(3 rows)

		5.FULL OUTER JOIN : Gives all the data from both the tables.
			Query1 :training_db=# select * from employee full outer join department on employee.id=department.emp_id;
				o/p==>
						 id | name  | age |  address   | salary  | join_date  | id |  dept   | emp_id 
						----+-------+-----+------------+---------+------------+----+---------+--------
						  2 | Teddy |  37 | Delhi      |   85000 |            |  1 | IT      |      2
						  1 | Paul  |  32 | INDIA      |   20000 | 2001-07-13 |  2 | Billing |      1
						  5 | David |  27 | Texas      |   85000 | 2007-12-13 |  3 | Sales   |      5
						  6 | Rahul |  20 | INDIA      | 19800.2 | 2019-08-27 |    |         |       
						  4 | Mark  |  25 | Rich-Mond  |   65000 | 2007-12-13 |    |         |       
						  3 | Teddy |  23 | Norway     |   17000 |            |    |         |       
						(6 rows)

27.UNION and UNION ALL : It will combine the result of two select queries but the select should return same number of columns.Union does not 				return duplicate values but Union All returns duplicate values.
			Query : training_db=# select * from employee left outer join department on employee.id=department.emp_id UNION 
 				select * from employee inner join department on employee.id=department.emp_id; 
				o/p==> 
						 id | name  | age |  address   | salary  | join_date  | id |  dept   | emp_id 
						----+-------+-----+------------+---------+------------+----+---------+--------
						  4 | Mark  |  25 | Rich-Mond  |   65000 | 2007-12-13 |    |         |       
						  6 | Rahul |  20 | INDIA      | 19800.2 | 2019-08-27 |    |         |       
						  2 | Teddy |  37 | Delhi      |   85000 |            |  1 | IT      |      2
						  3 | Teddy |  23 | Norway     |   17000 |            |    |         |       
						  1 | Paul  |  32 | INDIA      |   20000 | 2001-07-13 |  2 | Billing |      1
						  5 | David |  27 | Texas      |   85000 | 2007-12-13 |  3 | Sales   |      5
						(6 rows)

28.ALIAS : You can rename a table or a column temporarily by giving another name, which is known as ALIAS.
	Example: training_db=# select c.id as employee_id,c.name as employee_name,c.age,d.dept from employee as c, department as d where 				c.id=D.emp_id;
			O/p==> 
						 employee_id | employee_name | age |  dept   
						-------------+---------------+-----+---------
							   2 | Teddy         |  37 | IT
							   1 | Paul          |  32 | Billing
							   5 | David         |  27 | Sales
						(3 rows)

29.VIEW : 
	Example : training_db=# create view employee_view as  select id,name from employee;
			o/p==> 
						 id | name  
						----+-------
						  4 | Mark
						  5 | David
						  6 | Rahul
						  3 | Teddy
						  1 | Paul
						  2 | Teddy
						(6 rows)

30.Subqueries: query inside query is called subqueries .
		Example1: training_db=# select * from employee where id in(select id from employee where salary>50000);
				o/p==>
						 id | name  | age |  address   | salary | join_date  
						----+-------+-----+------------+--------+------------
						  4 | Mark  |  25 | Rich-Mond  |  65000 | 2007-12-13
						  2 | Teddy |  37 | Delhi      |  85000 | 
						  5 | Varun |  27 | Texas      |  85000 | 2007-12-13
						(3 rows)

31.AUTO INCREMENT: it is used to auto increment the value.It is done with the help of serial data type.
	Example : training_db=# create table employee1(
		  training_db(# Emp_id serial primary key not null,
		  training_db(# name char(20),
		  training_db(# age int not null);
 		#Inserting the values in the table : training_db=# insert into employee1(name,age) values('Vikas',30),('Jai',26),('Vijay',24);

			
32.Indexes : It fastens the select and where query ,It is used for retrieval
	Example : training_db=# create index emp_index on employee(id);
			o/p==>
						training_db=# \d employee
								      Table "public.employee"
						  Column   |         Type          | Collation | Nullable | Default 
						-----------+-----------------------+-----------+----------+---------
						 id        | integer               |           | not null | 
						 name      | character varying(20) |           | not null | 
						 age       | integer               |           | not null | 
						 address   | text                  |           |          | 
						 salary    | real                  |           |          | 
						 join_date | date                  |           |          | 
						Indexes:
						    "emp_index" btree (id)
		#Drop Index: 
				training_db=# drop index emp_index;

33.TRUNCATE Table command : It will not remove the table ,it will only deletes all the value inside the table but drop table will delete the 					table.

					training_db=# select * from demo;
						 name         | age |    number    
					----------------------+-----+--------------
					 Akash                |  23 |   8750419707
					 Varun                |  25 |   8750419709
					 Dheeraj              |  30 | 991140578387
					(3 rows)
			 On truncate :training_db=# truncate demo;
					o/p==>
					 name | age | number 
					------+-----+--------
					(0 rows)
























						
		
	

	





				












 
















		
